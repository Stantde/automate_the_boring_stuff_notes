I. Flow Control
* Flow control statements can decide which Python instructions to execute under 
	which conditions.

	A. Boolean Values
	* While the integer, floating-point, and string data types have an unlimited 
		number of possible values, the Boolean data type has only two values: True 
		and False. (Boolean is capitalized because the data type is named after 
		mathematician George Boole.)

	B. Comparison Operators
	* Comparison operators, also called relational operators, compare two values 
		and evaluate down to a single Boolean value.
	* Operator 	| 	Meaning
	---------------------------------------
		== 	| 	Equal to
		!= 	| 	Not equal to
		<  	|	Less than
		>	|	Greater than
		<=	|	Less than or equal to
		>=	|	Greater than or equal to

	C. Boolean Operators
	* The three Boolean operators (and, or, and not) are used to compare Boolean 
		values.

		i. Binary Boolean Operators
		* The and and or operators always take two Boolean values (or expressions), 
			so they’re considered binary operators. 

			1. The and operator evaluates an expression to True if both Boolean values 
				are True; otherwise, it evaluates to False.	

			2. On the other hand, the or operator evaluates an expression to True if 
				either of the two Boolean values is True. If both are False, it evaluates 
				to False.

		ii. The not Operator
		* Unlike and and or, the not operator operates on only one Boolean value (or 
			expression). This makes it a unary operator. The not operator simply 
			evaluates to the opposite Boolean value.

	D. Mixing Boolean and Comparison Operators
	* The Boolean operators have an order of operations just like the math 
		operators do. After any math and comparison operators evaluate, Python 
		evaluates the not operators first, then the and operators, and then the or 
		operators.

II. Elements of Flow Control
* Flow control statements often start with a part called the condition and are 
	always followed by a block of code called the clause. 

	A. Conditions
	* Conditions always evaluate down to a Boolean value, True or False. A flow 
		control statement decides what to do based on whether its condition is True 
		or False.

	B. Blocks of Code
	* Lines of Python code can be grouped in blocks. Here are some rules:
	
		1. Blocks begin when the indentation increases.

		2. Blocks can contain other blocks.

		3. Blocks end when the indentation decreases to zero or to a containing 
			block’s indentation.


	C. Program Execution
	* The program execution (or simply, execution) is a term for the current 
		instruction being executed.


	D. Flow Control Statements
	* These are the actual decisions being made by the program.

		i. if Statements
		* An if statement’s clause (that is, the block following the if statement)
			will execute if the statement’s condition is True. The clause is skipped if 
			the condition is False.

		ii. else Statements
		* An if clause can optionally be followed by an else statement. The else 
			clause is executed only when the if statement’s condition is False.

		iii. elif Statements
		* The elif statement is an “else if” statement that always follows an if or 
			another elif statement. It provides another condition that is checked only 
			if all of the previous conditions were False.

		iv. while Loop Statements
		* at the end of a while clause, the program execution jumps back to the start 
			of the while statement. The while clause is often called the while loop or 
			just the loop.

			An Annoying while Loop

		v. break Statements
		* There is a shortcut to getting the program execution to break out of a 
			while loop’s clause early. If the execution reaches a break statement, it 
			immediately exits the while loop’s clause. 

		vi. continue Statements
		*  When the program execution reaches a continue statement, the program 
			execution immediately jumps back to the start of the loop and reevaluates 
			the loop’s condition. (This is also what happens when the execution reaches 
			the end of the loop.)

		vii. “TRUTHY” AND “FALSEY” VALUES
		* Conditions will consider some values in other data types equivalent to True 
			and False. When used in conditions, 0, 0.0, and '' (the empty string) are 
			considered False, while all other values are considered True. 

		for Loops and the range() Function
		* Is useful for executing a clause a set number of times.
		* Brak and continue statements may be used in for loops as well.

		An Equivalent while Loop

		The Starting, Stopping, and Stepping Arguments to range()
		* The range() function can also be called with three arguments. The first 
			two arguments will be the start and stop values, and the third will be the 
			step argument. The step is the amount that the variable is increased by 
			after each iteration. So calling range(0, 10, 2) will count from zero to 
			eight by intervals of two.

III. Importing Modules
* Python also comes with a set of modules called the standard library.

	A. from import Statements
	* An alternative form of the import statement is composed of the from keyword, 
		followed by the module name, the import keyword, and a star; for example, 
		from random import *.

	B. Ending a Program Early with the sys.exit() Function

A Short Program: Guess the Number

A Short Program: Rock, Paper, Scissors

Summary

Practice Questions

1. What are the two values of the Boolean data type? How do you write them?
A1. True and False

2. What are the three Boolean operators?
A2. not, or, and

3. Write out the truth tables of each Boolean operator (that is, every possible combination of Boolean values for the operator and what they evaluate to).
and
---

True and True 	==> True
True and False 	==> False
False and True 	==> False
False and False ==> False

not
----

not True	==> False
not False	==> True

or
----
True or True	==> True
True or False	==> True
False or True	==> True
False or False	==> False

4. What do the following expressions evaluate to?

i.	(5 > 4) and (3 == 5)
		True and False
			False
ii.	not (5 > 4)
		not True
			False
iii.	(5 > 4) or (3 == 5)
		True or False
			True
iv.	not ((5 > 4) or (3 == 5))
		not ( True or False)
			not ( True)
				False
v.	(True and True) and (True == False)
		True and False
			False
vi.	(not False) or (not True)
		True or False
			True
	
5. What are the six comparison operators?
	i.	==
	ii.	!=	
	iii.	>
	iv.	>=
	v.	<
	vi.	<=

6. What is the difference between the equal to operator and the assignment operator?
	'=' vs '=='
	'=' assigns the value on the right to the variable on the left.
	'==' compares the values on either side and returns True if the two evaluate to the same.

7. Explain what a condition is and where you would use one.
	A condition is an element of flow control which is used to decide which blocks
		of code should execute.

8. Identify the three blocks in this code:

spam = 0
if spam == 10:
    print('eggs')
    if spam > 5:
        print('bacon')
    else:
        print('ham')
    print('spam')
print('spam')

1spam = 0
1if spam == 10:
2    print('eggs')
2    if spam > 5:
3        print('bacon')
2    else:
3        print('ham')
2    print('spam')
1print('spam')

9. Write code that prints Hello if 1 is stored in spam, prints Howdy if 2 is stored in spam, and prints Greetings! if anything else is stored in spam.

spam = None
if spam == 1:
	print('Hello ')
elif spam == 2:
	print('Howdy ')
else:
	print('Greetings! ')

10. What keys can you press if your program is stuck in an infinite loop?
	Ctrl + C

11. What is the difference between break and continue?
	break breaks out of a loop, where continue returns to the top of the loop and 
		evaluates its conditional statement.

12. What is the difference between range(10), range(0, 10), and range(0, 10, 1) in a for loop?
	None.

13. Write a short program that prints the numbers 1 to 10 using a for loop. Then write an equivalent program that prints the numbers 1 to 10 using a while loop.

	for10.py
for i in range(1, 11):
    print(str(i))
	while10.py
i = 1 
while i <=10:
    print(i)
    i+=1

14. If you had a function named bacon() inside a module named spam, how would you call it after importing spam?
	spam.bacon()

Extra credit: Look up the round() and abs() functions on the internet, and find out what they do. Experiment with them in the interactive shell.

